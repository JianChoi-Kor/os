
KOCW / 이화여자대학교 반효경 교수님의 운영체제 강의



운영체제의 기본


0405


운영체제 (Operating Systems, OS)


- 컴퓨터 하드웨어 바로 위에 설치되어 사용자 및 다른 모든 소프트웨어와 하드웨어를 연결하는 소프트웨어 계층
(모든 컴퓨터 시스템의 필수적인 부분)

- 컴퓨터 시스템을 편리하게 사용할 수 있는 환경을 제공

***
- 컴퓨터 시스템의 자원을 효율적으로 관리(CPU, 메모리, I/O 장치 등) (최대한의 성능을 내도록)

- 하드웨어를 직접 다루는 복잡한 부분을 운영체제가 대행

- 현재 컴퓨터는 한 대의 컴퓨터에서 여러 프로그램을 동시에 실행시킬 수 있는 환경을 지원합니다.
(노래를 듣고 프로그래밍을 하면서 구글링도 할 수 있는) 
하지만 이때 각각의 프로그램에서는 해당 프로그램 혼자 컴퓨터에서 실행되고 있다고 생각하며 작업을 수행하는데요. 이러한 작업을 가능하게 하는 중간 역할을 하는 것이 바로 운영체제

어떤 역할을 하느냐?
실행 중인 프로그램 들에게 짧은 시간씩 CPU를 번갈아 할당, 실행중인 프로그램 들에 메모리 공간을 적절히 분배
CPU가 너무 빠르기 때문에 (0.1초 이내) CPU가 번갈아 할당되는지 알 수가 없음


메모리는 유한하다. 여러 프로그램을 동시에 실행시키면 프로그램이 메모리에 올라가고 언젠가는 메모리가 다 소진됨.

어떤 프로그램에 메모리 용량을 얼마나 할당할지에 대한 문제

메모리 = CPU의 작업 공간
=> CPU에서 프로그램이 실행되려면 메모리에 반드시 올라가야 함



컴퓨터 시스템의 구조

컴퓨터 내부 (CPU, 메모리)
입출력(I/O) 디바이스 (디스크, 키보드, 마우스, 프린트, 모니터)

(메모리에는 운영체제와 실행 중인 프로그램들이 올라가 있음)

부팅이 일어난다 => 운영체제가 메모리에 올라가서 실행이 된다.

운영체제는 컴퓨터가 꺼지기 전까지 항상 실행되는 프로그램이다.
(핵심적인 부분 커널, 커널은 메모리에 상주)


CPU는 매 클럭마다 메모리 어딘가에 있는 기계어를 읽어 연산을 한다.

(CPU가 입출력 디바이스에 직접 접근할 수는 없음, I/O Controller라고 하는 I/O를 전담하는 CPU가 따로 붙어 있음)


CPU는 짧은 시간 간격으로 여러 프로그램에 번갈아 할당 => 운영체제의 가장 중요한 역할이 CPU 스케줄링
(어떤 프로그램에게 CPU 사용권을 줄지?, 얼마동안 줄 것인지?)


CPU와 I/O 장치의 속도 차는 100만배 정도의 차이가 난다.
이 속도 차를 극복하기 위해 인터럽트, 캐싱




0408

1. CPU를 짧은 시간 간격으로 여러 프로그램들에게 번갈아가면서 사용권을 주는 CPU 스케줄링
2. 한정된 메모리 공간에 어떤 프로그램을 얼마나 올려놓을 것인가?


입력 -> 연산 -> 출력
CUP를 쓰고, I/O를 쓰는 반복

CPU 스케줄링 FCFS(First-Come First-Served)

효율적이지는 않다.


CPU 스케줄링 SJF(Shortest-Job-First)

금번 CPU 사용 시간이 가장 짧은 프로세스를 제일 먼저 스케줄
SJF는 minimum average waiting time을 보장

-> Starvation(기아 현상) 발생 가능

효율성은 좋지만 형평성은 좋지 않음


CPU 스케줄링 RR(Round Robin)

현재 CPU 스케줄링에서 가장 많이 사용되는 방식

- 각 프로세스는 동일 크기의 CPU 할당 시간을 가짐
- 할당 시간이 끝나면 인터럽트가 발생하여 프로세스는 CPU를 빼앗기고 CPU 큐의 제일 뒤에 줄을 섬
- n 개의 프로세스가 CPU 큐에 있는 경우
=> 어떤 프로세스도 (n-1)* 할당시간 이상 기다리지 않음 (n-1 => 본인을 빼고)
=> 대기시간이 프로세스의 CPU 사용 시간에 비례


해당 기법은 CPU를 빼앗는 방법이 필요, CPU를 빼앗는 것은 운영체제 혼자 할 수 없음, 하드웨어 적인 지원을 통해 인터럽트 발생, CPU를 빼앗아 맨 뒤에 줄을 세움



메모리 관리

각각의 실행파일을 실행 시키면 해당 파일이 메모리에 올라가 프로세스가 됨
(정확하게는 메모리에 바로 올라가는 것이 아니고 가상 메모리에 올라갔다가 메모리에 올라감)


메모리에서 쫓겨난 가상 메모리는 디스크(스왑영역)으로 이동된다.
=> 스왑 영역은 메모리의 연장 공간으로 생각할 수 있다.

컴퓨터가 꺼지면 디스크는 살아있고, 메모리는 살아진다, 디스크(스왑영역)은 살아는 있지만 의미가 없는 정보가 된다.


CPU - 메모리 - 디스크


LRU (가장 오래 전에 참조 페이지 삭제)

LFU (참조 횟수가 가장 적은 페이지 삭제)

















